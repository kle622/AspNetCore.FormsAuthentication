using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Text;

namespace AspNetCore.FormsAuthentication.Tests
{
    [TestClass]
    public class CookieCompatSHA512Tests
    {
        // web.config : <machineKey validation="HMACSHA512" decryption="AES" ...
        private const string SHA512ValidationKey = "B8D67E50B3C95378DD4ED7FE5110646251C6A67220FBF76ED5977B11BA64A049913D6FEE64A0FB5DC0EF7B80C920F2BFC3A49CD1116ED6EB5B52E20914781182";
        private const string SHA512DecryptionKey = "185411B38AE7D4A9778A993D9F6A6830748D45C8D93C480FB43E91A361508FA7";

        [TestMethod]
        public void Can_Decrypt_Forms_Authentication_Ticket_WithSha512()
        {
            // Arrange
            var encryptor = new FormsAuthenticationTicketEncryptor(
                SHA512DecryptionKey, 
                SHA512ValidationKey, 
                DecryptionKeyAlgorithm.Aes,
                ValidationKeyAlgorithm.Sha512,
                CompatibilityMode.Framework20SP2);

            // Act
            // this cookie has been generated by legacy FormsAuthentication
            var encryptedText

            FormsAuthenticationTicket result = encryptor.DecryptCookie(encryptedText);

            Assert.AreEqual("/", result.CookiePath);
            Assert.AreEqual(false, result.IsPersistent);
            Assert.AreEqual("4@@@@ca@ilevelsolutions.com", result.Name);
            Assert.AreEqual("1a4359f8-9d6f-431b-96bf-e83ce59c06f9", result.UserData);
            Assert.AreEqual(2, result.Version);
            Assert.AreEqual(result.IssueDate, new DateTime(636482478251309351, DateTimeKind.Utc).ToLocalTime());
            Assert.AreEqual(result.Expiration, new DateTime(636482514251309351, DateTimeKind.Utc).ToLocalTime());
        }

        [TestMethod]
        public void Can_Encrypt_And_Decrypt_Forms_Authentication_Ticket_WithSha512()
        {
            // Arrange
            var issueDateUtc = DateTime.UtcNow;
            var expiryDateUtc = issueDateUtc.AddHours(1);
            var formsAuthenticationTicket = new FormsAuthenticationTicket(2, "someuser@some-email.com", issueDateUtc.ToLocalTime(), expiryDateUtc.ToLocalTime(), false, "custom data", "/");

            var encryptor = new FormsAuthenticationTicketEncryptor(
                SHA512DecryptionKey, 
                SHA512ValidationKey,
                DecryptionKeyAlgorithm.Aes,
                ValidationKeyAlgorithm.Sha512,
                CompatibilityMode.Framework20SP2);

            // Act
            // We encrypt the forms auth cookie.
            var encryptedText = encryptor.Encrypt(formsAuthenticationTicket);

            Assert.IsNotNull(encryptedText);

            // We decrypt the encypted text back into a forms auth ticket, and compare it to the original ticket to make sure it
            // roundtripped successfully.
            FormsAuthenticationTicket decryptedFormsAuthenticationTicket = encryptor.DecryptCookie(encryptedText);

            Assert.AreEqual(formsAuthenticationTicket.CookiePath, decryptedFormsAuthenticationTicket.CookiePath);
            Assert.AreEqual(formsAuthenticationTicket.IsPersistent, decryptedFormsAuthenticationTicket.IsPersistent);
            Assert.AreEqual(formsAuthenticationTicket.UserData, decryptedFormsAuthenticationTicket.UserData);
            Assert.AreEqual(formsAuthenticationTicket.Version, decryptedFormsAuthenticationTicket.Version);
            Assert.AreEqual(formsAuthenticationTicket.Expired, decryptedFormsAuthenticationTicket.Expired);
            Assert.AreEqual(formsAuthenticationTicket.IsValid(), decryptedFormsAuthenticationTicket.IsValid());
            Assert.AreEqual(false, decryptedFormsAuthenticationTicket.Expired);
            Assert.AreEqual(true, decryptedFormsAuthenticationTicket.IsValid());
            Assert.AreEqual(formsAuthenticationTicket.Expiration, decryptedFormsAuthenticationTicket.Expiration);
            Assert.AreEqual(formsAuthenticationTicket.IssueDate, decryptedFormsAuthenticationTicket.IssueDate);
        }
    }
}
